
States.ods - need to know initial state of gpio's on Pi and arduino
    this will also determine if/where pullups or pulldowns are needed
Arduino trigger pin starts as input but floating
pi trigger pin starts as input floating or output high depending on tech source
    this should be fine as the arduino will have settled into output mode and
    the pi will become input and read arduino output when the script starts
arduino feedback pin starts as input but floating
pi feedback pin starts as input floating or output high depending on tech source
    this should be fine as the arduino will have settled into input pullup mode
    and is waiting for the pi to send a low at bootup
when the pi is done shutting down, what is the state of the feedback pin?
    the arduino has a pullup, but the pi may latch the pin to a low state

--------------------------------------------------------------------------------

DONE: write a script to do latest download/install and save it in top level to do
    one-liner
DONE: what to do with one-liner script after install???

DONE: push external pin header to the right to avoid heatsink on cpu
DONE: line up with 3rd or 4th row from left
TEST: kicad custom logo for sheet/silkscreen need to be included
TEST: also default sheet? for logo in block
DONE: also include open hardware logo in blocks
DONE: place default text (name, copyright, all rights, WTFPL) in default sheet
DONE: finish pi zero pcb
DONE: kicad add dh_logo_silk.pretty to common folder (for my silkscreen footprint)
DONE: kicad add default sheet to common folder (for default sheet)
DONE: kicad add my logo/osh logo to common folder for new sheets
DONE: "designed with kicad" logo in block? (same as silkscreen)
DONE: kicad pi3/pi0 common folder for silkscreen footprint/sheet logos/default wks
DONE: pi0 README
DONE: we can remove logos for sheet i think? they are in the wks files as svg points?

add JST and pins for power in

DONE: update: pi may reboot after update, do we deal with this?
    if user DOESN'T reboot, settings re-runs itself and shows new version number
    escaping from new version goes back to old? should we just bail? FORK!!!
DONE: update: retropie shortcut needs sudo to make symlink b/c /usr/local/bin is
    owned by root (wrong owner on ports folder)
NO: update: show installer output in tailbox? (still need sudo password in terminal)
    should really leave this as a terminal thing - works better

DONE: documentation on how the button/programming/led works
DONE: documentation on how to use settings
man pages for all pi software scripts
DONE: section headers (##) in main readme
DONE: documentation in main readme for device, description and usage
DONE: documentation in main readme for OSH license
DONE: documentation on button during programming:
    DONE: long press exits all
    DONE: short while recording on: skip, keep on code
    DONE: short while recording off: skip, off is same as on

DONE: error checking:
    DONE: killswitch-install.sh
    DONE: killswitch-uninstall.sh
    DONE: install-latest.py

DONE: firmware needs LED at 100% during programming, reset to On level afterwards

DONE: strip IRRemote to remove all decoding stuff - only need raw codes

DONE: fix relative paths? installer, uninstaller, any bash script
    DONE: change to dir of script so relative paths work

DONE: tell folks about pinout for female header so they can do custom wiring of
    PWR/GND/ICSP/serial/feedback/trigger

DONE: first step for install-latest, update is create .killswitch
    download everything there
    delete in error







fix settings not showing up in ports - only works for bash script???
https://github.com/RetroPie/RetroPie-Setup/wiki/Ports
~/RetroPie-Setup/scriptmodules/helpers.sh (addPort)

fix install-latest.py requirement for python3-requests (only in retropie?)


check if we are able to do a first-time programming on the atmega
    just put it in the installer, reprogram every time we run installer
        (should only be first install and update)
    we won't have a version number though
    do we use the version number from the actual device?
    using the one from the firmware won't work
    DONE: we also have no power unless we put a diode across the fet

make sure 14/15 point to software uart and bluetooth points to hardware uart
    (bluetooth is more important than talking to device)

pi 3:
/dev/ttyAMA0 - hardware serial - bluetooth
GPIO 14/15 - /dev/ttyS0 - software serial - enable_uart=1 - console login/getty
/dev/serial0 -> /dev/ttyS0
/dev/serial1 -> /dev/ttyAMA0
https://spellfoundry.com/2016/05/29/configuring-gpio-serial-port-raspbian-jessie-including-pi-3/








test on retropie - what is A/B? A is enter.. B is ??? escape?
    update main readme

use pulses for trigger in killswitch-boot.py? (instead of timing length of button hold)
    first high - set everything up
    first low - start timer
    next high -
    next low - add to number of pulses, look at time elapsed

get arduino libs into firmware lib folder and remove symlinks
when building, check github for latest version of each lib
    if newer, download to libs folder
    then build

run file after reboot -
    in cmdline.txt, add init=/usr/local/bin/killswitch-run-once.py
    on run, remove that part from cmdline.txt
    show dialog that says "KillSwitch installed successfully"
    "do you want to run settings now? YES/NO"
    "you can run settings by opening a terminal and typing 'killswitch-settings.py'"
    "or use retropie port 'KillSwitch'"

make work with toggle (but let ppl know they can't futz with the switch during
    bootup/shutdown)
    https://retropie.org.uk/forum/topic/15727/tutorial-onoff-shim-exposed-neat-powerswitch-from-pimoroni

convert install to py (what if user doesn't have py?)
DONE: convert settings to py
convert uninstall to py
DONE: convert make-release to py
